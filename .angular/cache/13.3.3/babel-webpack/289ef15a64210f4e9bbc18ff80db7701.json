{"ast":null,"code":"import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { CategoryService } from \"app/services/category.service\";\nimport { ProductService } from \"app/services/product.service\";\nimport { ToastrService } from \"ngx-toastr\";\nimport { Product } from \"../product\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"app/services/category.service\";\nimport * as i3 from \"app/services/product.service\";\nimport * as i4 from \"ngx-toastr\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common\";\n\nfunction ProductAddComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const category_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r1.categoryId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r1.categoryName, \" \");\n  }\n}\n\nexport let ProductAddComponent = /*#__PURE__*/(() => {\n  class ProductAddComponent {\n    constructor(formBuilder, categoryService, productService, toasterService, router) {\n      this.formBuilder = formBuilder;\n      this.categoryService = categoryService;\n      this.productService = productService;\n      this.toasterService = toasterService;\n      this.router = router;\n      this.product = new Product();\n    }\n\n    createProductAddForm() {\n      this.productAddForm = this.formBuilder.group({\n        productName: [\"\", Validators.required],\n        productDescription: [\"\", Validators.required],\n        productPicture: [\"\", Validators.required],\n        categoryId: [\"\", Validators.required]\n      });\n    }\n\n    ngOnInit() {\n      this.createProductAddForm();\n      this.getCategories();\n    }\n\n    getCategories() {\n      this.categoryService.getKategoriler().subscribe(response => {\n        this.categories = response.data;\n      });\n    }\n\n    add() {\n      if (this.productAddForm.valid) {\n        let productModel = Object.assign({}, this.productAddForm.value);\n        this.productService.addProduct(productModel).subscribe(response => {\n          this.router.navigate([\"products\"]);\n          this.toasterService.success(response.message, \"Başarılı\");\n        }, responseError => {\n          if (responseError.error.ValidationErrors.length > 0) {\n            for (let i = 0; i < responseError.error.ValidationErrors.length; i++) {\n              this.toasterService.error(responseError.error.ValidationErrors[i].ErrorMessage, \"Doğrulama hatası\");\n            }\n          }\n        });\n      } else {\n        this.toasterService.error(\"Eksik Ürün Bilgileri.\", \"Uyarı\");\n      }\n\n      return;\n    }\n\n  }\n\n  ProductAddComponent.ɵfac = function ProductAddComponent_Factory(t) {\n    return new (t || ProductAddComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.CategoryService), i0.ɵɵdirectiveInject(i3.ProductService), i0.ɵɵdirectiveInject(i4.ToastrService), i0.ɵɵdirectiveInject(i5.Router));\n  };\n\n  ProductAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductAddComponent,\n    selectors: [[\"app-product-add\"]],\n    features: [i0.ɵɵProvidersFeature([CategoryService, ProductService])],\n    decls: 16,\n    vars: 2,\n    consts: [[1, \"form-group\", 3, \"formGroup\"], [1, \"form-goup\"], [\"type\", \"text\", \"id\", \"productName\", \"name\", \"productName\", \"formControlName\", \"productName\", \"placeholder\", \"\\u00DCr\\u00FCn Ad\\u0131\", 1, \"form-control\"], [1, \"form-group\"], [\"type\", \"text\", \"id\", \"productDescription\", \"name\", \"productDescription\", \"formControlName\", \"productDescription\", \"placeholder\", \"\\u00DCr\\u00FCn Detay\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"productPicture\", \"formControlName\", \"productPicture\", \"placeholder\", \"\\u00DCr\\u00FCn Resim Link\", 1, \"form-control\"], [\"formControlName\", \"categoryId\", \"requried\", \"\", \"id\", \"categoryId\", \"name\", \"categoryId\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"value\"]],\n    template: function ProductAddComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\");\n        i0.ɵɵtext(1, \"Yeni \\u00DCr\\u00FCn Ekle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0)(3, \"div\", 1);\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 3);\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵelementStart(11, \"div\", 3)(12, \"select\", 6);\n        i0.ɵɵtemplate(13, ProductAddComponent_option_13_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ProductAddComponent_Template_button_click_14_listener() {\n          return ctx.add();\n        });\n        i0.ɵɵtext(15, \" \\u00DCr\\u00FCn Ekle \");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.productAddForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngForOf\", ctx.categories);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.SelectControlValueAccessor, i6.NgForOf, i1.NgSelectOption, i1.ɵNgSelectMultipleOption],\n    styles: [\"\"]\n  });\n  return ProductAddComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}