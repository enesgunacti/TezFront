{"ast":null,"code":"import { FormBuilder, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { HizmetService } from \"app/services/hizmet.service\";\nimport { ToastrService } from \"ngx-toastr\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"app/services/hizmet.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport let HizmetlerUpdateComponent = /*#__PURE__*/(() => {\n  class HizmetlerUpdateComponent {\n    constructor(formBuilder, hizmetlerService, toasterService, router, activatedRoute) {\n      this.formBuilder = formBuilder;\n      this.hizmetlerService = hizmetlerService;\n      this.toasterService = toasterService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n    }\n\n    ngOnInit() {\n      this.createHizmetEditForm();\n      this.activatedRoute.params.subscribe(params => {\n        if (params[\"hizmetId\"]) {\n          this.getHizmet(params[\"hizmetId\"]);\n        }\n      });\n    }\n\n    createHizmetEditForm() {\n      this.hizmetEditForm = this.formBuilder.group({\n        hizmetAdi: [\"\", Validators.required],\n        hizmetResmi: [\"\", Validators.required],\n        hizmetOzet: [\"\", Validators.required],\n        hizmetDetay: [\"\", Validators.required]\n      });\n    }\n\n    getHizmet(hizmetId) {\n      this.hizmetlerService.getHizmetById(hizmetId).subscribe(response => {\n        var _a, _b, _c, _d, _e;\n\n        this.hizmetEditForm = this.formBuilder.group({\n          hizmetId: [((_a = response.data) === null || _a === void 0 ? void 0 : _a.hizmetId) || \"\", \"\"],\n          hizmetAdi: [((_b = response.data) === null || _b === void 0 ? void 0 : _b.hizmetAdi) || \"\", \"\"],\n          hizmetResmi: [((_c = response.data) === null || _c === void 0 ? void 0 : _c.hizmetResmi) || \"\", \"\"],\n          hizmetOzet: [((_d = response.data) === null || _d === void 0 ? void 0 : _d.hizmetOzet) || \"\", \"\"],\n          hizmetDetay: [((_e = response.data) === null || _e === void 0 ? void 0 : _e.hizmetDetay) || \"\", \"\"]\n        });\n      });\n    }\n\n    edit() {\n      if (this.hizmetEditForm.valid) {\n        let categoryModel = Object.assign({}, this.hizmetEditForm.value);\n        this.hizmetlerService.editHizmet(categoryModel).subscribe(response => {\n          this.router.navigate([\"hizmetler\"]);\n          this.toasterService.success(response.message, \"Hizmet Güncellemesi\");\n        }, responseError => {\n          if (responseError.error.ValidationErrors.length > 0) {\n            for (let i = 0; i < responseError.error.ValidationErrors.length; i++) {\n              this.toasterService.error(responseError.error.ValidationErrors[i].ErrorMessage, \"Doğrulama hatası\");\n            }\n          }\n        });\n      } else {\n        this.toasterService.error(\"Eksik Hizmet Bilgileri.\", \"Uyarı\");\n      }\n\n      return;\n    }\n\n  }\n\n  HizmetlerUpdateComponent.ɵfac = function HizmetlerUpdateComponent_Factory(t) {\n    return new (t || HizmetlerUpdateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HizmetService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n\n  HizmetlerUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HizmetlerUpdateComponent,\n    selectors: [[\"hizmetler-update\"]],\n    decls: 15,\n    vars: 1,\n    consts: [[1, \"form-groupx\", 3, \"formGroup\"], [1, \"form-group\"], [\"type\", \"text\", \"id\", \"hizmetAdi\", \"name\", \"hizmetAdi\", \"formControlName\", \"hizmetAdi\", \"placeholder\", \"Hizmet Ad\\u0131\", 1, \"form-control\"], [\"type\", \"text\", \"id\", \"\", \"name\", \"hizmetDetay\", \"formControlName\", \"hizmetDetay\", \"placeholder\", \"Hizmet Detay\", 1, \"form-control\"], [\"type\", \"text\", \"id\", \"\", \"name\", \"hizmetOzet\", \"formControlName\", \"hizmetOzet\", \"placeholder\", \"Hizmet \\u00D6zet\", 1, \"form-control\"], [\"type\", \"text\", \"name\", \"hizmetResmi\", \"formControlName\", \"hizmetResmi\", \"placeholder\", \"Hizmet Resim Link\", 1, \"form-control\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n    template: function HizmetlerUpdateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\");\n        i0.ɵɵtext(1, \"Hizmet G\\u00FCncelle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0)(3, \"div\", 1);\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"div\", 1);\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 1);\n        i0.ɵɵelement(9, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 1);\n        i0.ɵɵelement(11, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵelementStart(13, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function HizmetlerUpdateComponent_Template_button_click_13_listener() {\n          return ctx.edit();\n        });\n        i0.ɵɵtext(14, \" Hizmet G\\u00FCncelle \");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.hizmetEditForm);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName],\n    styles: [\"\"]\n  });\n  return HizmetlerUpdateComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}